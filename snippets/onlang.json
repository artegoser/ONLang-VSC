{
  "ONlang boilerplate": {
    "prefix": ["onlang", "main"],
    "body": [
      "//meta:json",
      "{",
      "  main: [",
      "    ${0:\"commands\"}",
      "  ]",
      "}"
    ],
    "description": "Create a standard boilerplate for onlang"
  },

  "print": {
    "prefix": "print",
    "body": ["{print: [${1:\"values\"}]},"],
    "description": "Print output to console"
  },

  "println": {
    "prefix": "println",
    "body": ["{println: [${1:\"values\"}]},"],
    "description": "Println output to console"
  },

  "sleep": {
    "prefix": "sleep",
    "body": ["{sleep: ${1:\"ms\"}},"],
    "description": "Sleep thread in ms"
  },

  "return": {
    "prefix": "return",
    "body": ["{return: ${1:\"value\"}},"],
    "description": "Return a value in function"
  },

  "toString": {
    "prefix": "toString",
    "body": ["{toString: ${1:\"value\"}},"],
    "description": "Convert any value to string"
  },

  "input": {
    "prefix": "input",
    "body": ["{input: \"${1:placeholder}\"},"],
    "description": "Input a value from stdin"
  },

  "let": {
    "prefix": "let",
    "body": ["{", "let: {", "    ${1:name}: ${2:\"value\"}", "  }", "},"],
    "description": "Define variable"
  },

  "assign": {
    "prefix": "assign",
    "body": ["{", "assign: {", "    ${1:name}: ${2:\"value\"}", "  }", "},"],
    "description": "Assign variable"
  },

  "var": {
    "prefix": "var",
    "body": ["{ var: \"${1:name}\" }"],
    "description": "Get variable value"
  },

  "ref": {
    "prefix": "ref",
    "body": ["{ ref: \"${1:name}\" }"],
    "description": "Get variable reference"
  },

  "isExist": {
    "prefix": "isExist",
    "body": ["{ isExist: \"${1:name}\" }"],
    "description": "Check existence of variable"
  },

  "delete": {
    "prefix": "delete",
    "body": ["{ delete: \"${1:name}\" }"],
    "description": "Delete variable"
  },

  "arr": {
    "prefix": "arr",
    "body": ["{ arr: [${1:\"values\"}] }"],
    "description": "Create array with computable values"
  },

  "obj": {
    "prefix": "obj",
    "body": ["{ obj: {${1:\"values\"}} }"],
    "description": "Create object with computable values"
  },

  "calc": {
    "prefix": "calc",
    "body": [
      "{ calc: [${1:\"operand\"}, \"${2|+,-,/,*,%,&,\\|,^,<<,>>|}\", ${3:\"operand\"}] }"
    ],
    "description": "Calculate function"
  },

  "comp": {
    "prefix": "comp",
    "body": [
      "{ comp: [${1:\"operand\"}, \"${2|==,!=,>=,<=,<,>|}\", ${3:\"operand\"}] }"
    ],
    "description": "Comparison function"
  },

  "loop": {
    "prefix": "loop",
    "body": ["{ loop: [${0:\"commands\"}] }"],
    "description": "Loop cycle"
  },

  "scope": {
    "prefix": "scope",
    "body": ["{ scope: [${0:\"commands\"}] }"],
    "description": "Create scope"
  },

  "if-body": {
    "prefix": "if-body",
    "body": [
      "{",
      "  if: {",
      "    condition: ${1:{ comp: [${2:\"operand\"}, \"${3|==,!=,>=,<=,<,>|}\", ${4:\"operand\"}] \\}},",
      "    body: [${0:\"commands\"}],",
      "  }",
      "},"
    ],
    "description": "Condition"
  },

  "if-body-else": {
    "prefix": "if-body-else",
    "body": [
      "{",
      "  if: {",
      "    condition: ${1:{ comp: [${2:\"operand\"}, \"${3|==,!=,>=,<=,<,>|}\", ${4:\"operand\"}] \\}},",
      "    body: [${5:\"commands\"}],",
      "    else: [${0:\"commands\"}]",
      "  }",
      "},"
    ],
    "description": "Condition"
  },

  "function": {
    "prefix": ["fn", "function", "def"],
    "body": [
      "{",
      "  fn: {",
      "    name: \"${1:name}\",",
      "    args: [${2:\"arguments\"}],",
      "    body: [${0:\"commands\"}]",
      "  }",
      "},"
    ],
    "description": "Define function"
  },

  "ErrExit": {
    "prefix": "ErrExit",
    "body": ["\"ErrExit\""],
    "description": "Exit from programm with code 1"
  },
  "Exit": {
    "prefix": "Exit",
    "body": ["\"Exit\""],
    "description": "Exit from programm with code 0"
  },
  "clear": {
    "prefix": "clear",
    "body": ["\"clear\""],
    "description": "Clear console"
  },
  "break": {
    "prefix": "break",
    "body": ["\"break\""],
    "description": "Break loop"
  },
  "continue": {
    "prefix": "continue",
    "body": ["\"continue\""],
    "description": "continue loop"
  }
}
